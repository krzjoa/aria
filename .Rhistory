usethis::use_mit_license()
usethis::use_mit_license("Krzysztof Joachimiak")
pkgbuild::compile_dll()
pkgbuild::compile_dll()
devtools::install()
devtools::install()
devtools::document()
pkgbuild::compile_dll()
devtools::document()
pkgbuild::compile_dll()
devtools::document()
devtools::document()
devtools::document()
pkgbuild::compile_dll()
devtools::document()
aria:::C_add_input
purrr:::coerce_impl
aria_ctx <- aria_context()
class(aria_ctx)
?new_vctr
#' @title Create `aria` tensor of arbitrary shapes
#' @description Tensor abstraction, an interface for CPU and CUDA tensors.
#' @param data numeric vector, array or data.frame
#' @param dims Dimensions
#' @param requires_grad is gradient required; logical
#' @importFrom rray rray
#' @importFrom vctrs new_vtcr
#' @examples
#' library(aria)
#' x <- cpu_tensor(1:30, c(3, 10))
cpu_tensor <- function(data, dims, requires_grad){
data_tensor <- rray(
x = data,
dim = dims
)
struct <- list(
data = data_tensor,
dims  = dims,
grad  = NULL,
xptr  = xptr::null_xptr(),
requires_grad = requires_grad
)
.tensor <-  new_vctr(
.data = struct,
class = c("aria_tensor", "aria_cpu_tensor")
)
# Adding tensor
ctx <- get_context()
register_ops(ctx, .tensor)
.tensor
}
x <- cpu_tensor(1:30, c(3, 10))
library(rray)
#' @title Create `aria` tensor of arbitrary shapes
#' @description Tensor abstraction, an interface for CPU and CUDA tensors.
#' @param data numeric vector, array or data.frame
#' @param dims Dimensions
#' @param requires_grad is gradient required; logical
#' @importFrom rray rray
#' @importFrom vctrs new_vtcr
#' @examples
#' library(aria)
#' x <- cpu_tensor(1:30, c(3, 10))
cpu_tensor <- function(data, dims, requires_grad){
data_tensor <- rray(
x = data,
dim = dims
)
struct <- list(
data = data_tensor,
dims  = dims,
grad  = NULL,
xptr  = xptr::null_xptr(),
requires_grad = requires_grad
)
.tensor <-  new_vctr(
.data = struct,
class = c("aria_tensor", "aria_cpu_tensor")
)
# Adding tensor
ctx <- get_context()
register_ops(ctx, .tensor)
.tensor
}
x <- cpu_tensor(1:30, c(3, 10))
#' @title Create `aria` tensor of arbitrary shapes
#' @description Tensor abstraction, an interface for CPU and CUDA tensors.
#' @param data numeric vector, array or data.frame
#' @param dims Dimensions
#' @param requires_grad is gradient required; logical
#' @importFrom rray rray
#' @importFrom vctrs new_vtcr
#' @examples
#' library(aria)
#' x <- cpu_tensor(1:30, c(3, 10))
cpu_tensor <- function(data, dims, requires_grad = FALSE){
data_tensor <- rray(
x = data,
dim = dims
)
struct <- list(
data = data_tensor,
dims  = dims,
grad  = NULL,
xptr  = xptr::null_xptr(),
requires_grad = requires_grad
)
.tensor <-  new_vctr(
.data = struct,
class = c("aria_tensor", "aria_cpu_tensor")
)
# Adding tensor
ctx <- get_context()
register_ops(ctx, .tensor)
.tensor
}
x <- cpu_tensor(1:30, c(3, 10))
library(vctrs)
x <- cpu_tensor(1:30, c(3, 10))
install.packages('bookdown')
debugonce(aria:::connect)
library(aria)
ctx <- get_context()
register_ops(ctx, cars)
register_ops(ctx, data.frame)
x <- cpu_tensor(5, dims = 1)
y <- x ** 3
if (!is.list(input))
input <- list(input)
if (!is.list(output))
output <- list(output)
input[[1]]$xptr
debugonce(aria:::.abstract_operator)
library(aria)
ctx <- get_context()
register_ops(ctx, cars)
register_ops(ctx, data.frame)
x <- cpu_tensor(5, dims = 1)
y <- x ** 3
requires_grad <- any(x$requires_grad, y$requires_grad)
.fun <- register_ops(get_context(), fun, deriv)
x$xptr
y$xptr
x$xptr
z <- cpu_tensor(5, dims = 1)
z
z$xptr
debugonce(aria:::register_ops)
z <- cpu_tensor(5, dims = 1)
ptr <- .Call(C_register_ops, ctx[["container"]], r.ops,
paired.ops)
ptr
ops.num <- get_ops_number(ptr)
ctx$ops[[as.character(ops.num)]] <- r.ops
paired.ops
inherits(r.ops, "aria_tensor")
set_tensor_xptr(r.ops, ptr)
r.ops$xptr
ptr
qwe <- list(1,2,3)
set_tensor_param(qwe, 2, ptr)
qwe
as.list(z)
ptr
as.list(r.ops)
set_tensor_xptr
set_tensor_xptr(r.ops,"lol")
as.list(r.ops)
set_tensor_param(qwe, 2, ptr)
set_tensor_param(z, 3, "trollo")
as.list(z)
set_tensor_param(z, 4, "trollo")
as.list(z)
set_tensor_param(z, 5, "trollo")
as.list(z)
z$grad <- 23
z
as.list(z)
set_tensor_param(z, 5, "lollo")
as.list(z)
devtools::install()
devtools::build_site()
setwd("../../myfiles/")
encryptr::encrypt_file("TinyTeX.zip")
encryptr::encrypt_file("lol")
encryptr::decrypt_file("lol.encryptr.bin")
encryptr::decrypt_file("lol.encryptr.bin", file_name = "lol2")
encryptr::decrypt_file("lol.encryptr.bin", file_name = "lol3")
encryptr::decrypt_file("lol.encryptr.bin", file_name = "lol3")
encryptr::decrypt_file("lol.encryptr.bin", file_name = "lol4")
devtools::build_site()
